Puppet::Type.type(:quobyte_volume_config).provide(:quobyte_volume_config) do
  
 desc 'Manages Quobyte volume configurations.'


  # Checks whether the declared resource exists already.
  def exists?
    #notice("DEBUG + " + resource[:content])
    configs = Hash.new
    qmgmt(['volume', 'config', 'list']).each_line { |l|
      configs[l.chomp()] = true
    }

    # diff config is volume config exists
    if ( configs[resource[:name]] )
      diff_config
    else
      return false
    end
  end


  def qmgmt(args, stdin=nil)
    ret = Puppet::Util::Execution.execute(['/usr/bin/qmgmt'] +  args, {:stdinfile => stdin})

    if ( resource[:api_url] )
      args.unshift('-u', resource[:api_url])
    end
    
    while ( ret.exitstatus == 248 ) # Cluster not ready
      ret = Puppet::Util::Execution.execute(['/usr/bin/qmgmt'] +  args)
    end

    debug("qmgmt: " + ret)
    return ret
  end

  # Creates a new configuration based on the 'content' parameter.
  
  def create
    tmp = Puppet::FileSystem::Uniquefile.new('quobyte_volume_config')
    tmp.write(resource[:content])
    tmp.flush()

    qmgmt(['volume', 'config', 'import', [resource[:name]], tmp.path])
  end

  # Removes an existing volume configuration.

  def destroy
    ret = qmgmt(['volume', 'config', 'delete', resource[:name]])
    if ( ret.exitstatus != 0 )
      fail("quobyte volume config delete #{resource[:name]} failed with status #{ret.exitstatus.to_s}. Output follows." + out.join("\n"))
    end
  end

  def ensure
    return resource[:ensure]
  end

  def ensure=(value)
    set(:ensure => value)
  end

  # diff current config with wanted config
  private
  def diff_config
    volume_config = qmgmt(['volume', 'config', 'export', resource[:name]]).chop()

    tmp = Puppet::FileSystem::Uniquefile.new('quobyte_volume_config')
    tmp.write(resource[:content])
    tmp.flush()

    diff = String.new

    Open3.popen2("diff -u - " + tmp.path) {|stdin, stdout, wait_thr|
        # Input to diff.
        stdin.print(volume_config)
        #stdin.print("\n")

        # Without this diff will wait for EOF indefinitely.
        stdin.close()

        # Output generated by diff
        
        stdout.lines.each { |line|
          diff = diff + line
        }

        # Blocks until diff is finished.
        result = wait_thr.value

        if ( result.exitstatus == 0 )
          return true
        else
          notice "Volume config #{resource[:name]} modified.\n" + diff
          return false
        end
    }
  end

end
